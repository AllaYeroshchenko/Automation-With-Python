

#!/usr/bin/env python3

import json
import locale
import sys
import emails
import reports

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
  total_sales = 0
  car_model=""
  for item in data:
    if item["total_sales"] > total_sales:
      total_sales = item["total_sales"]
      car_model = item["car"]["car_model"]
    # TODO: also handle most popular car_year
  pop_year=0
  total=0
  new_d={}
  for item in data:
    if item["car"]["car_year"] in new_d:
      new_d[item["car"]["car_year"]]+=item["total_sales"]
    else:
      new_d[item["car"]["car_year"]]=item["total_sales"]
  for key, value in new_d.items():
    if value>total:
      total=value
      pop_year=key
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(car_model, total_sales),
    "The most popular year was {} with {} sales.".format(pop_year, total)]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  ct=cars_dict_to_table(data)
  sum = "<br/>".join(summary)
  print(sum)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", sum, ct)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
#  receiver = "student-02-507a02b47026@example.com"
  subject = "Sales summary for last month"
  body = "\n".join(summary)

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)























#!/usr/bin/env python3


# import json
# import locale
# import sys


# def load_data(filename):
#   """Loads the contents of filename as a JSON file."""
#   with open(filename) as json_file:
#     data = json.load(json_file)
#   return data


# def format_car(car):
#   """Given a car dictionary, returns a nicely formatted name."""
#   return "{} {} ({})".format(
#       car["car_make"], car["car_model"], car["car_year"])


# def process_data(data):
#   """Analyzes the data, looking for maximums.

#   Returns a list of lines that summarize the information.
#   """
#   max_revenue = {"revenue": 0}
#   for item in data:
#     # Calculate the revenue generated by this model (price * total_sales)
#     # We need to convert the price from "$1234.56" to 1234.56
#     item_price = locale.atof(item["price"].strip("$"))
#     item_revenue = item["total_sales"] * item_price
#     if item_revenue > max_revenue["revenue"]:
#       item["revenue"] = item_revenue
#       max_revenue = item
#     # TODO: also handle max sales
#     # TODO: also handle most popular car_year

#   summary = [
#     "The {} generated the most revenue: ${}".format(
#       format_car(max_revenue["car"]), max_revenue["revenue"]),
#   ]

#   return summary
